# Application
pg.name=Pledari Grond
pg.version=@project.version@
pg.activeLanguages=PUTER,RUMANTSCHGRISCHUN,SURMIRAN,SUTSILVAN,VALLADER

# Backup
pg.backup.location=data-test/backup/
pg.backup.number=7
pg.backup.cron.puter=-
pg.backup.cron.rumantschgrischun=0 15 1 * * *
pg.backup.cron.surmiran=0 30 1 * * *
pg.backup.cron.sursilvan=0 45 1 * * *
pg.backup.cron.sutsilvan=0 0 2 * * *
pg.backup.cron.vallader=-
pg.backup.cron.names=0 30 2 * * *
pg.backup.cron.users=0 45 2 * * *

# Export
pg.export.location=data-test/export/
pg.export.temp=data-test/export_tmp/
pg.export.cron=0 0 3 * * *
pg.export.dump_location=data-test/db_dump/
pg.export.restore_location=data-test/db_restore/

# index
pg.index.suggestion_generation=0 0 0 * * *

# names
pg.names.has_table=true
pg.names.base_api_url=https://api.pledarigrond.ch/

# JWT
pg.jwt.secret=QaZNu1wsVbONKrJPshfp3VVNUKeFMz

# default admin
## allows to setup a user during startup. remove values, if no user should be created
pg.admin.user=admin@pledarigrond.ch
pg.admin.password=EDdFGe62Hp9JyRTL

# Lucene
pg.lucene.baseFolder=data-test/lucene_index

# DB configuration
pg.db.host=localhost
pg.db.port=27123
pg.db.username=rootuser
pg.db.password=rootpass
pg.db.authentication-database=admin

pg.db.puter=puter
pg.db.rumantschgrischun=rumantschgrischun
pg.db.surmiran=surmiran
pg.db.sursilvan=sursilvan
pg.db.sutsilvan=sutsilvan
pg.db.vallader=vallader
pg.db.names=names
pg.db.registrations=registrations

# logging
logging.level.org.springframework.web=DEBUG
grafana.api.token=xxx

# Spring Boot
spring.servlet.multipart.maxFileSize=500MB
spring.servlet.multipart.maxRequestSize=500MB
server.error.include-message=always

# Long term Backup
pg.s3.accessKey=xxx
pg.s3.secretKey=xxx
pg.s3.bucket=pledarigrond-testing
pg.s3.endpoint=xxx

bunny.zoneName=xxx
bunny.apiKey=xxx

# Hunspell
pg.hunspell.git.path=data-test/hunspell/git
pg.hunspell.git.url=xxx
pg.hunspell.git.branch=xxx
pg.hunspell.git.token=xxx
pg.hunspell.cron=0 15 3 * * *
pg.hunspell.location=data-test/hunspell/
